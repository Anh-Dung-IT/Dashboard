// <auto-generated />
using System;
using Dashboard.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dashboard.API.Migrations
{
    [DbContext(typeof(DashboardContext))]
    [Migration("20210720065409_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dashboard.API.Entities.Accounts", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Username = "admin",
                            Email = "abc@gmail.com",
                            Firstname = "admin",
                            Lastname = "admin",
                            Password = "$2a$11$8NwgycyRH50lI3/gy/ncu.VxXdHFwmpvwCsnmrLjwa97lgUHqbvsG"
                        },
                        new
                        {
                            Username = "admin1",
                            Email = "abc1@gmail.com",
                            Firstname = "admin1",
                            Lastname = "admin1",
                            Password = "$2a$11$8NwgycyRH50lI3/gy/ncu.VxXdHFwmpvwCsnmrLjwa97lgUHqbvsG"
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.Contacts", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            AvatarUrl = "avatar1",
                            Department = "D1",
                            Firstname = "First",
                            Lastname = "Person",
                            Project = "Project1",
                            Title = "DEV"
                        },
                        new
                        {
                            EmployeeId = 2,
                            AvatarUrl = "avatar2",
                            Department = "D2",
                            Firstname = "second",
                            Lastname = "Person",
                            Project = "Project2",
                            Title = "DEV"
                        },
                        new
                        {
                            EmployeeId = 3,
                            AvatarUrl = "avatar3",
                            Department = "D3",
                            Firstname = "third",
                            Lastname = "Person",
                            Project = "Project3",
                            Title = "DEV"
                        },
                        new
                        {
                            EmployeeId = 4,
                            AvatarUrl = "avatar4",
                            Department = "D4",
                            Firstname = "fourth",
                            Lastname = "Person",
                            Project = "Project4",
                            Title = "DEV"
                        },
                        new
                        {
                            EmployeeId = 5,
                            AvatarUrl = "avatar5",
                            Department = "D5",
                            Firstname = "fifth",
                            Lastname = "Person",
                            Project = "Project5",
                            Title = "DEV"
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.Dashboards", b =>
                {
                    b.Property<int>("DashboardsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LayoutsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DashboardsId");

                    b.HasIndex("LayoutsId");

                    b.HasIndex("Username");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new
                        {
                            DashboardsId = 1,
                            LayoutsId = 1,
                            Title = "Dashboard1",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.Layouts", b =>
                {
                    b.Property<int>("LayoutsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.HasKey("LayoutsId");

                    b.ToTable("Layouts");

                    b.HasData(
                        new
                        {
                            LayoutsId = 1,
                            Column = 1,
                            Row = 1
                        },
                        new
                        {
                            LayoutsId = 2,
                            Column = 2,
                            Row = 2
                        },
                        new
                        {
                            LayoutsId = 3,
                            Column = 3,
                            Row = 3
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.RefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevorked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Dashboard.API.Entities.Tasks", b =>
                {
                    b.Property<int>("TasksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WidgetsId")
                        .HasColumnType("int");

                    b.HasKey("TasksId");

                    b.HasIndex("Username");

                    b.HasIndex("WidgetsId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TasksId = 1,
                            IsCompleted = false,
                            TaskTitle = "Task1",
                            Username = "admin",
                            WidgetsId = 1
                        },
                        new
                        {
                            TasksId = 2,
                            IsCompleted = false,
                            TaskTitle = "Task2",
                            Username = "admin",
                            WidgetsId = 1
                        },
                        new
                        {
                            TasksId = 3,
                            IsCompleted = true,
                            TaskTitle = "Task3",
                            Username = "admin",
                            WidgetsId = 1
                        },
                        new
                        {
                            TasksId = 4,
                            IsCompleted = false,
                            TaskTitle = "Task4",
                            Username = "admin",
                            WidgetsId = 1
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.WidgetTypes", b =>
                {
                    b.Property<int>("WidgetTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WidgetTypesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WidgetTypesId");

                    b.ToTable("WidgetTypes");

                    b.HasData(
                        new
                        {
                            WidgetTypesId = 1,
                            WidgetTypesName = "Widget Task"
                        },
                        new
                        {
                            WidgetTypesId = 2,
                            WidgetTypesName = "Widget Note"
                        },
                        new
                        {
                            WidgetTypesId = 3,
                            WidgetTypesName = "Widget Contact"
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.Widgets", b =>
                {
                    b.Property<int>("WidgetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinHeight")
                        .HasColumnType("int");

                    b.Property<int>("MinWidth")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("WidgetTypesId")
                        .HasColumnType("int");

                    b.HasKey("WidgetsId");

                    b.HasIndex("DashboardsId");

                    b.HasIndex("WidgetTypesId");

                    b.ToTable("Widgets");

                    b.HasData(
                        new
                        {
                            WidgetsId = 1,
                            DashboardsId = 1,
                            MinHeight = 10,
                            MinWidth = 10,
                            Title = "Widget1",
                            WidgetTypesId = 1
                        },
                        new
                        {
                            WidgetsId = 2,
                            DashboardsId = 1,
                            Description = "for test",
                            MinHeight = 20,
                            MinWidth = 20,
                            Title = "Widget2",
                            WidgetTypesId = 2
                        },
                        new
                        {
                            WidgetsId = 3,
                            DashboardsId = 1,
                            MinHeight = 30,
                            MinWidth = 30,
                            Title = "Widget3",
                            WidgetTypesId = 3
                        });
                });

            modelBuilder.Entity("Dashboard.API.Entities.Dashboards", b =>
                {
                    b.HasOne("Dashboard.API.Entities.Layouts", "Layout")
                        .WithMany()
                        .HasForeignKey("LayoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.API.Entities.Accounts", "Account")
                        .WithMany("Dashboards")
                        .HasForeignKey("Username");

                    b.Navigation("Account");

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("Dashboard.API.Entities.RefreshTokens", b =>
                {
                    b.HasOne("Dashboard.API.Entities.Accounts", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("Username");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Dashboard.API.Entities.Tasks", b =>
                {
                    b.HasOne("Dashboard.API.Entities.Accounts", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.API.Entities.Widgets", "Widget")
                        .WithMany("Tasks")
                        .HasForeignKey("WidgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Dashboard.API.Entities.Widgets", b =>
                {
                    b.HasOne("Dashboard.API.Entities.Dashboards", "Dashboard")
                        .WithMany("Widgets")
                        .HasForeignKey("DashboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.API.Entities.WidgetTypes", "WidgetType")
                        .WithMany()
                        .HasForeignKey("WidgetTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("WidgetType");
                });

            modelBuilder.Entity("Dashboard.API.Entities.Accounts", b =>
                {
                    b.Navigation("Dashboards");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Dashboard.API.Entities.Dashboards", b =>
                {
                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("Dashboard.API.Entities.Widgets", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
